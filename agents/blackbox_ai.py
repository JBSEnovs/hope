import os
import json
import uuid
import requests
from datetime import datetime

class BlackboxAI:
    """
    Class for integration with BlackboxAI service.
    This allows using BlackboxAI models for medical queries.
    """
    
    def __init__(self, model="blackboxai"):
        """
        Initialize the BlackboxAI agent
        
        Args:
            model (str): Model to use (defaults to "blackboxai")
        """
        self.api_url = "https://api.blackbox.ai/api/chat"
        self.headers = {
            "Content-Type": "application/json"
            # No API key required for the free version
        }
        self.conversations = {}  # Store conversation histories
        self.model = model or "blackboxai"
        
        # Available models in BlackboxAI
        self.available_models = [
            "gpt-4o",
            "claude-sonnet-3.5",
            "gemini-pro",
            "blackboxai"
        ]
    
    def send_message(self, content, conversation_id=None):
        """
        Send a message to BlackboxAI
        
        Args:
            content (str): Message content
            conversation_id (str): Conversation ID for continuing a conversation
            
        Returns:
            dict: Response with conversation data and BlackboxAI response
        """
        # Generate conversation ID if not provided
        if not conversation_id:
            conversation_id = str(uuid.uuid4())
        
        # Initialize conversation history if needed
        if conversation_id not in self.conversations:
            self.conversations[conversation_id] = []
        
        # Add user message to history
        user_message = {
            "id": conversation_id,
            "content": content,
            "role": "user"
        }
        self.conversations[conversation_id].append(user_message)
        
        # Prepare the payload
        payload = {
            "messages": self.conversations[conversation_id],
            "id": conversation_id,
            "previewToken": None,
            "userId": None,
            "codeModelMode": True,
            "agentMode": {},
            "trendingAgentMode": {},
            "isMicMode": False,
            "userSystemPrompt": None,
            "maxTokens": 1024,
            "playgroundTopP": 0.9,
            "playgroundTemperature": 0.5,
            "isChromeExt": False,
            "githubToken": None,
            "clickedAnswer2": False,
            "clickedAnswer3": False,
            "clickedForceWebSearch": False,
            "visitFromDelta": False,
            "mobileClient": False,
            "userSelectedModel": self.model  # Dynamic model selection
        }
        
        try:
            # Send request to BlackboxAI
            response = requests.post(self.api_url, json=payload, headers=self.headers)
            response.raise_for_status()  # Raise exception for non-200 status codes
            
            # Get response text and clean it
            response_text = response.text
            cleaned_response = response_text.replace("Generated by BLACKBOX.AI, try unlimited chat https://www.blackbox.ai\n\n", "")
            
            # Create assistant message
            assistant_message = {
                "id": f"response-{datetime.now().timestamp()}",
                "content": cleaned_response,
                "role": "assistant"
            }
            
            # Add to conversation history
            self.conversations[conversation_id].append(assistant_message)
            
            return {
                "success": True,
                "conversation_id": conversation_id,
                "response": cleaned_response
            }
            
        except requests.RequestException as e:
            return {
                "success": False,
                "error": f"Error communicating with BlackboxAI: {str(e)}"
            }
    
    def continue_conversation(self, conversation_id, content):
        """
        Continue an existing conversation with BlackboxAI
        
        Args:
            conversation_id (str): The ID of the conversation to continue
            content (str): Message content
            
        Returns:
            dict: Response with conversation data and BlackboxAI response
        """
        # Check if conversation exists
        if conversation_id not in self.conversations:
            return {
                "success": False,
                "error": "Conversation not found"
            }
        
        # Use the send_message method with the existing conversation ID
        return self.send_message(content, conversation_id)
    
    def get_available_models(self):
        """
        Get available models for BlackboxAI
        
        Returns:
            list: Available model names
        """
        return self.available_models
    
    def change_model(self, model):
        """
        Change the BlackboxAI model
        
        Args:
            model (str): Model name to use
            
        Returns:
            bool: Success status
        """
        if model in self.available_models:
            self.model = model
            return True
        return False 